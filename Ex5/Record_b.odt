
Script started on 2019-03-04 16:09:02+0530
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ cat pp.c
#include<stdio.h>
#include<stdlib.h>
struct process{
  int id;
  int st, ft;
};
typedef struct process Process;
Process pe[100];
int pid[10], at[10], bt[10], st[10], ft[10], tat[10], rt[10], wt[10],priority[10];
int curr, n, p_done[10];
float pt = 0, w = 0, t = 0, r = 0, time = 0;
int total = 0, tot = 0;
struct node{
  int data;
  int bt;
  struct node* next;
};
typedef struct node Node;
Node *front = NULL;
Node *rear = NULL;
void line(int n){
  for(int l = 0; l < n; l++)
    for(int i = 0; i < 11 + (1/(l+1)); i++)
      printf("-");
  printf("\n");
}
Node* newNode(int d, int p){
  Node *temp = (Node*)malloc(sizeof(Node));
  temp->data = d;
  temp->bt = p;
  temp->next = NULL;
  return temp;
}
void dequeue(Node** front){
  Node* temp = *front;
  (*front) = (*front)->next;
  free(temp);
}
void enqueue(Node** front, int d, int p){
  Node* start = (*front);
  Node* temp = newNode(d, p);
  if(start==NULL){
    *front=temp;
  }
  else if ((*front)->bt > p){
    temp->next = *front;
    (*front) = temp;
  }
  else{
    while (start->next != NULL && priority[start->next->data] <p){
      start = start->next;
    }
    temp->next = start->next;
    start->next = temp;
  }
}
void update(){


  int flag = 0;
  if(wt[curr] == -1){
    wt[curr] = st[curr] - at[curr];
    rt[curr] = st[curr] - at[curr];
    r += rt[curr];
    flag = 1;
  }
  else
    wt[curr] = wt[curr]+(pt-ft[curr]);
  ft[curr] = time;
  pe[tot].ft = ft[curr];
  tot++;
  printf("%d \t %d \t %d \t",st[curr],ft[curr],wt[curr]);
  if(bt[curr]!=0){
    printf("--\t");
    p_done[curr] = 1;
  }
  else{
    tat[curr] = ft[curr] - at[curr];
    printf("%d\t",tat[curr]);
  }
  if(flag==1){
    rt[curr] = st[curr] - at[curr];
    r = r + rt[curr];
    printf("%d\n",rt[curr]);
  }
  else
    printf("--\n");
  if(bt[curr]==0){
    t += tat[curr];
    w += wt[curr];
  }
  else
    enqueue(&front,curr,bt[curr]);
}
void initialise(){
  for(int i=0;i<n;i++){
    wt[i]=-1;
    p_done[i] = 0;
  }
}
int alldone(){
  total=0;
  for (int i=0;i<n;i++){
    if(p_done[i]==0)
      return 0;
  }
  return 1;
}
Node* addprocess(int time){
  for(int i = 0; i < n; i++){
    if(at[i] == time){
      if(p_done[i] == 0){
	enqueue(&front,i,priority[i]);
	p_done[i] = 1;
      }
    }
  }
  return front;
}
int main(){
  time = 0;


  printf("Enter the number of processes: ");
  scanf("%d",&n);
  for(int i = 0; i < n; i++){
    pid[i] = i + 1;
    printf("Enter details of process %d ",pid[i]);
    printf("\nEnter arrival time: ");
    scanf("%d",&at[i]);
    printf("Enter burst time: ");
    scanf("%d",&bt[i]);
    printf("Enter priority: ");
    scanf("%d",&priority[i]);
  }
  initialise();
  printf("PID\t AT\t BT\tP\t ST\t FT\t WT\t TAT\t RT\n");
  front = addprocess(time);
  if(front != NULL){
    curr = front->data;
    dequeue(&front);
  }
  else
    curr = -1;
  while(!alldone()||(front!=NULL)||curr!=-1){
    if(curr != -1){
      pt = time;
      st[curr] = time;
      printf("%d\t %d\t %d\t %d\t",pid[curr],at[curr],bt[curr],priority[curr]);
      pe[tot].id = pid[curr];
      pe[tot].st = st[curr];
      while(bt[curr]>0){
                
	time++;
	bt[curr]--;
	front = addprocess(time);
	if(front != NULL && priority[curr] > priority[front->data])
	  break;
      }
      update();
    }
    else{
      time++;
      front = addprocess(time);
    }
    if(front != NULL){
      curr = front->data;
      dequeue(&front);
    }
    else
      curr = -1;
  }
  w/=n; t/=n; r/=n;
  printf("Average: WT = %.2f TAT = %.2f RT = %.2f\n", w, t, r);
  printf("Gantt chart:\n");
  line(tot);
  for(int i = 0; i <= 2; i++){
    if(i==1){
      for(int j = 0; j < tot; j++)
	printf("|    P%d    ", pe[j].id);
      printf("|");
    }
    else{
      for(int j = 0; j < tot; j++)
	printf("|          ");


      printf("|");
    }
    printf("\n");
  }
  line(tot);
  for(int i = 0; i < tot; i++)
    printf("%d         %d ",pe[i].st,pe[i].ft);
  printf("\n");
}
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ ./pp
Enter the number of processes: 4
Enter details of process 1 
Enter arrival time: 1
Enter burst time: 4
Enter priority: 2
Enter details of process 2 
Enter arrival time: 0
Enter burst time: 6
Enter priority: 1
Enter details of process 3 
Enter arrival time: 3
Enter burst time: 4
Enter priority: 4
Enter details of process 4 
Enter arrival time: 2
Enter burst time: 5
Enter priority: 3
PID	 AT	 BT	P	 ST	 FT	 WT	 TAT	 RT
2	 0	 6	 1	0 	 6 	 0 	6	0
1	 1	 4	 2	6 	 10 	 5 	9	5
4	 2	 5	 3	10 	 15 	 8 	13	8
3	 3	 4	 4	15 	 19 	 12 	16	12
Average: WT = 6.25 TAT = 11.00 RT = 12.50
Gantt chart:
---------------------------------------------
|          |          |          |          |
|    P2    |    P1    |    P4    |    P3    |
|          |          |          |          |
---------------------------------------------
0         6 6         10 10         15 15         19 
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ cat npp.c
#include<stdio.h>
struct process{
  int id, p, v;
  float at, bt, st, ft, wt, tat, rt;
};
typedef struct process Process;
Process p[100];
int N = 0;
void line(int n){
  for(int l = 0; l < n; l++)
    for(int i = 0; i < 11 + (1/(l+1)); i++)
      printf("-");
  printf("\n");
}
void input(){
  printf("No. of processes: ");
  while(N == 0)


    scanf("%d", &N);
  for(int i = 0; i < N; i++){
    printf("Enter AT, BT and P of P%d: ", i+1);
    scanf("%f %f %d", &(p[i].at), &(p[i].bt), &(p[i].p));
    p[i].id = i + 1;
    p[i].v = 0;
  }
}
void sort(Process p[], int r){
  for(int i = 0; i < r - 1; i++)
    for(int j = 0; j < r - 1; j++)
      if(p[j].p > p[j+1].p){
	Process t = p[j];
	p[j] = p[j+1];
	p[j+1] = t;
      }
}
void npp(){
  for(int i = 0; i < N - 1; i++)
    for(int j = 0; j < N - 1; j++)
      if(p[j].at > p[j+1].at){
	Process t = p[j];
	p[j] = p[j+1];
	p[j+1] = t;
      }
  float avgwt, avgtat, avgrt;
  int c = 0, r = 0, ch = 0, i0 = 0;
  Process q[N], pq[N];
  q[0] = p[0];
  pq[0] = p[0];
  for(int i = 1; i < N; i++){
    if(p[i].at <= q[0].at && p[i].p < q[0].p){
      q[0] = p[i];
      i0 = i;
    }
  }
  p[i0].v = 1;
  q[0].v = 1;
  int t = q[0].at;
  do{
    ch = 0;
    if(c == 0){
      q[0].st = q[0].at;
      q[0].ft = q[0].st + q[0].bt;
      q[0].wt = 0;
      q[0].rt = 0;
      q[0].tat = q[0].bt;
      t += q[0].bt;
      c++;
      ch = 1;
      avgwt = 0;
      avgrt = 0;
      avgtat = q[0].tat;
    }
    else if(r > 0){
      q[c] = pq[0];
      q[c].st = (q[c].at > q[c-1].ft) ? q[c].at : q[c-1].ft;
      q[c].ft = q[c].st + q[c].bt;
      q[c].wt = q[c].st - q[c].at;
      q[c].rt = q[c].wt;
      q[c].tat = q[c].ft - q[c].at;
      t += q[c].bt;


      c++;
      ch = 1;
      avgwt += q[c-1].wt;
      avgrt += q[c-1].rt;
      avgtat += q[c-1].tat;
    }
    if(ch == 0)
      t++;
    if(ch == 1 && c > 0){
      for(int i = 1; i < r; i++){
	pq[i-1] = pq[i];
      }
      if(r > 0)
	r--;
    }
    for(int i = 0; i < N; i++){
      if(p[i].v == 0 && p[i].at <= t){
	p[i].v = 1;
	pq[r] = p[i];
	r++;
      }
    }
    sort(pq,r);
  }while(c < N);
  printf("\nNPP Scheduling:\nPID \t P \t AT \t BT \t ST \t FT \t WT \t TAT \t RT\n");
  avgwt/=N; avgtat/=N; avgrt/=N;
  for(int i = 0; i < N; i++){
    printf("P %d \t %d \t %.2f \t %.2f \t %.2f \t %.2f \t %.2f \t %.2f \t %.2f", q[i].id, q[i].p, q[i].at, q[i].bt, q[i].st, q[i].ft, q[i].wt, q[i].tat, q[i].rt);
    printf("\n");
  }
  printf("Average: WT = %3.2f TAT = %3.2f RT = %3.2f\n\n", avgwt, avgtat, avgrt);
  printf("Gantt chart:\n");
  line(N);
  for(int i = 0; i <= 2; i++){
    if(i==1){
      for(int j = 0; j < N; j++)
	printf("|    P%d    ", q[j].id);
      printf("|");
    }
    else{
      for(int j = 0; j < N; j++)
	printf("|          ");
      printf("|");
    }
    printf("\n");
  }
  line(N);
  for(int i = 0; i < N; i++){
    printf("%.1f     %.1f ",q[i].st,q[i].ft);
  }
  printf("\n");
}
int main(){
  input();
  npp();
}




#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ ./npp
No. of processes: 4
Enter AT, BT and P of P1: 1 4 2
Enter AT, BT and P of P2: 2 6 1
Enter AT, BT and P of P3: 0 5 4
Enter AT, BT and P of P4: 3 3 3

NPP Scheduling:
PID 	 P 	 AT 	 BT 	 ST 	 FT 	 WT 	 TAT 	 RT
P 3 	 4 	 0.00 	 5.00 	 0.00 	 5.00 	 0.00 	 5.00 	 0.00
P 2 	 1 	 2.00 	 6.00 	 5.00 	 11.00 	 3.00 	 9.00 	 3.00
P 1 	 2 	 1.00 	 4.00 	 11.00 	 15.00 	 10.00 	 14.00 	 10.00
P 4 	 3 	 3.00 	 3.00 	 15.00 	 18.00 	 12.00 	 15.00 	 12.00
Average: WT = 6.25 TAT = 10.75 RT = 6.25

Gantt chart:
---------------------------------------------
|          |          |          |          |
|    P3    |    P2    |    P1    |    P4    |
|          |          |          |          |
---------------------------------------------
0.0     5.0 5.0     11.0 11.0     15.0 15.0     18.0 
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ cat rr.c
#include<stdio.h>
struct process{
  int id;
  float at, bt, st, ft, wt, tat, rt;
};
typedef struct process Process;
Process p[100], pe[100];
int N = 0, ts = 1;
void line(int n){
  for(int l = 0; l < n; l++)
    for(int i = 0; i < 11 + (1/(l+1)); i++)
      printf("-");
  printf("\n");
}
void input(){
  printf("No. of processes: ");
  while(N == 0)
    scanf("%d", &N);
  for(int i = 0; i < N; i++){
    printf("Enter AT and BT of P%d: ", i+1);
    scanf("%f %f", &(p[i].at), &(p[i].bt));
    p[i].id = i + 1;
  }
  printf("Time slice: ");
  scanf("%d", &ts);
}
void rr(){
  for(int i = 0; i < N - 1; i++)
    for(int j = 0; j < N - 1; j++)
      if(p[j].at > p[j+1].at){
	Process t = p[j];


	p[j] = p[j+1];
	p[j+1] = t;
      }
  float avgwt, avgtat, avgrt;
  int tot = 0, c = N, qn = 1, t = p[0].at, V[100] = {0}, cc = 0;
  Process qu[N];
  qu[0] = p[0];
  pe[0] = p[0];
  while(c != 0){
    cc = 0;
    for(int i = qn; i < N; i++){
      if(p[i].at <= t){
	qu[qn] = p[i];
	qn++;
      }
    }
    for(int i = 0; i < qn; i++){
      if(V[i] != -1){
	pe[tot].id = qu[i].id;
	pe[tot].at = qu[i].at;
	pe[tot].bt = qu[i].bt;
	if(tot == 0){
	  pe[tot].st = qu[i].at;
	  pe[tot].ft = (qu[i].bt > ts) ? (qu[i].at + ts) : (qu[i].at + qu[i].bt);
	  qu[i].bt -= ts;
	  pe[tot].wt = 0;
	  pe[tot].rt = 0;
	  if(qu[i].bt <= 0)
	    pe[tot].tat = pe[tot].ft - pe[tot].at;
	  else
	    pe[tot].tat = -1;
	  if(pe[tot].tat != -1)
	    qu[i].tat = pe[tot].tat;
	  if(pe[tot].rt != -1)
	    qu[i].rt = pe[tot].rt;
	  qu[i].wt = 0;
	  qu[i].ft = pe[tot].ft;
	  V[i] = 1;
	  if(qu[i].bt <= 0){ V[i] = -1; c--;}
	}
	else{
	  if(pe[tot].at <= pe[tot-1].ft)
	    pe[tot].st = pe[tot-1].ft;
	  else
	    pe[tot].st = pe[tot].at;
	  pe[tot].ft = (qu[i].bt > ts) ? (pe[tot].st + ts) : (pe[tot].st + qu[i].bt);
	  qu[i].bt -= ts;
	  if(V[i] == 1)
	    pe[tot].wt = qu[i].wt + (pe[tot].st - qu[i].ft);
	  else
	    pe[tot].wt = pe[tot].st - pe[tot].at;
	  if(V[i] == 0)
	    pe[tot].rt = pe[tot].st - pe[tot].at;
	  else
	    pe[tot].rt = -1;
	  if(qu[i].bt <= 0)
	    pe[tot].tat = pe[tot].ft - pe[tot].at;
	  else
	    pe[tot].tat = -1;
	  qu[i].ft = pe[tot].ft;
	  qu[i].wt = pe[tot].wt;


	  if(pe[tot].tat != -1)
	    qu[i].tat = pe[tot].tat;
	  if(pe[tot].rt != -1)
	    qu[i].rt = pe[tot].rt;
	  V[i] = 1;
	  if(qu[i].bt <= 0){
	    V[i] = -1; c--;
	  }
	}
	tot++; t+= ts; cc = 1;
      }
      for(int i = qn; i < N; i++){
	if(p[i].at <= t){
	  qu[qn] = p[i];
	  qn++;
	}
      }
    }
    if(cc == 0)
      t += 1;
  }
  printf("\nRR Scheduling:\nPID \t AT \t BT \t ST \t FT \t WT \t TAT \t RT\n");
  for(int i = 0; i < tot; i++){
    if(pe[i].tat != -1){
      avgtat += pe[i].tat;
      avgwt += pe[i].wt;
    }
    if(pe[i].rt > 0)
      avgrt += pe[i].rt;
  }
  avgwt/=N; avgtat/=N; avgrt/=N;
  for(int i = 0; i < tot; i++){
    printf("P %d \t %.2f \t %.2f \t %.2f \t %.2f \t ", pe[i].id, pe[i].at, pe[i].bt, pe[i].st, pe[i].ft);
    if(pe[i].wt < 0)
      printf("-- \t ");
    else
      printf("%.2f \t ",pe[i].wt);
    if(pe[i].tat < 0)
      printf("-- \t ");
    else
      printf("%.2f \t ",pe[i].tat);
    if(pe[i].rt < 0)
      printf("-- \t ");
    else
      printf("%.2f \t ",pe[i].rt);
    printf("\n");
  }
  printf("Average: WT = %3.2f TAT = %3.2f RT = %3.2f\n\n", avgwt, avgtat, avgrt);
  printf("Gantt chart:\n");
  line(tot);
  for(int i = 0; i <= 2; i++){
    if(i==1){
      for(int j = 0; j < tot; j++)
	printf("|    P%d    ", pe[j].id);
      printf("|");
    }
    else{
      for(int j = 0; j < tot; j++)
	printf("|          ");
      printf("|");


    }
    printf("\n");
  }
  line(tot);
  for(int i = 0; i < tot; i++)
    printf("%.1f     %.1f ",pe[i].st,pe[i].ft);
  printf("\n");
}
int main(){
  input();
  rr();
}
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ ./rr
No. of processes: 4
Enter AT and BT of P1: 1 4
Enter AT and BT of P2: 0 6
Enter AT and BT of P3: 3 5
Enter AT and BT of P4: 2 7
Time slice: 5

RR Scheduling:
PID 	 AT 	 BT 	 ST 	 FT 	 WT 	 TAT 	 RT
P 2 	 0.00 	 6.00 	 0.00 	 5.00 	 0.00 	 -- 	 0.00 	 
P 1 	 1.00 	 4.00 	 5.00 	 9.00 	 4.00 	 8.00 	 4.00 	 
P 4 	 2.00 	 7.00 	 9.00 	 14.00 	 7.00 	 -- 	 7.00 	 
P 3 	 3.00 	 5.00 	 14.00 	 19.00 	 11.00 	 16.00 	 11.00 	 
P 2 	 0.00 	 1.00 	 19.00 	 20.00 	 14.00 	 20.00 	 -- 	 
P 4 	 2.00 	 2.00 	 20.00 	 22.00 	 13.00 	 20.00 	 -- 	 
Average: WT = 10.50 TAT = 16.00 RT = 5.50

Gantt chart:
-------------------------------------------------------------------
|          |          |          |          |          |          |
|    P2    |    P1    |    P4    |    P3    |    P2    |    P4    |
|          |          |          |          |          |          |
-------------------------------------------------------------------
0.0     5.0 5.0     9.0 9.0     14.0 14.0     19.0 19.0     20.0 20.0     22.0 
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ exit
exit

Script done on 2019-03-04 16:13:06+0530

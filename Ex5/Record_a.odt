
Script started on 2019-03-04 16:05:13+0530
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ cat fcfs.c
#include<stdio.h>
struct process{
  int id;
  float at, bt, st, ft, wt, tat, rt;
};
typedef struct process Process;
Process p[100];
int N = 0;
void line(int n){
  for(int l = 0; l < n; l++)
    for(int i = 0; i < 11 + (1/(l+1)); i++)
      printf("-");
  printf("\n");
}
void input(){
  printf("No. of processes: ");
  while(N == 0)
    scanf("%d", &N);
  for(int i = 0; i < N; i++){
    printf("Enter AT and BT of P%d: ", i+1);
    scanf("%f %f", &(p[i].at), &(p[i].bt));
    p[i].id = i + 1;
  }
}
void fcfs(){
  for(int i = 0; i < N - 1; i++)
    for(int j = 0; j < N - 1; j++)
      if(p[j].at > p[j+1].at){
	Process t = p[j];
	p[j] = p[j+1];
	p[j+1] = t;
      }
  float avgwt, avgtat, avgrt;
  p[0].st = p[0].at;
  p[0].ft = p[0].st + p[0].bt;
  p[0].wt = 0;
  p[0].rt = 0;
  p[0].tat = p[0].ft - p[0].at;
  avgwt = p[0].wt; avgtat = p[0].tat; avgrt = p[0].rt;
  for(int i = 1; i < N; i++){
    p[i].st = (p[i-1].ft > p[i].at) ? p[i-1].ft : p[i].at;
    p[i].ft = p[i].st + p[i].bt;
    p[i].wt = p[i].st - p[i].at;
    p[i].rt = p[i].wt;
    p[i].tat = p[i].ft - p[i].at;
    avgwt += p[i].wt; avgtat += p[i].tat; avgrt += p[i].rt;
  }
  printf("\nFCFS Scheduling:\nPID \t AT \t BT \t ST \t FT \t WT \t TAT \t RT\n");
  avgwt/=N;
  avgtat/=N;
  avgrt/=N;
  for(int i = 0; i < N; i++){
    printf("P %d \t %.2f \t %.2f \t %.2f \t %.2f \t %.2f \t %.2f \t %.2f", p[i].id, p[i].at, p[i].bt, p[i].st, p[i].ft, p[i].wt, p[i].tat, p[i].rt);
    printf("\n");
  }



  printf("Average: WT = %3.2f TAT = %3.2f RT = %3.2f\n\n", avgwt, avgtat,     avgrt);
  printf("Gantt chart:\n");
  line(N);
  for(int i = 0; i <= 2; i++){
    if(i==1){
      for(int j = 0; j < N; j++)
	printf("|    P%d    ", p[j].id);
      printf("|");
    }
    else{
      for(int j = 0; j < N; j++)
	printf("|          ");
      printf("|");
    }
    printf("\n");
  }
  line(N);
  for(int i = 0; i < N; i++){
    printf("%.1f     %.1f ",p[i].st,p[i].ft);
  }
  printf("\n");
}
int main(){
  input();
  fcfs();
}
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ ./fcfs
No. of processes: 4
Enter AT and BT of P1: 1 4
Enter AT and BT of P2: 0 6
Enter AT and BT of P3: 3 4
Enter AT and BT of P4: 2 3

FCFS Scheduling:
PID 	 AT 	 BT 	 ST 	 FT 	 WT 	 TAT 	 RT
P 2 	 0.00 	 6.00 	 0.00 	 6.00 	 0.00 	 6.00 	 0.00
P 1 	 1.00 	 4.00 	 6.00 	 10.00 	 5.00 	 9.00 	 5.00
P 4 	 2.00 	 3.00 	 10.00 	 13.00 	 8.00 	 11.00 	 8.00
P 3 	 3.00 	 4.00 	 13.00 	 17.00 	 10.00 	 14.00 	 10.00
Average: WT = 5.75 TAT = 10.00 RT = 5.75

Gantt chart:
---------------------------------------------
|          |          |          |          |
|    P2    |    P1    |    P4    |    P3    |
|          |          |          |          |
---------------------------------------------
0.0     6.0 6.0     10.0 10.0     13.0 13.0     17.0 
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ cat psjf.c
#include<stdio.h>
#include<stdlib.h>
struct process{
  int id;


  int st, ft;
};
typedef struct process Process;
Process pe[100];
int pid[10], at[10], bt[10], st[10], ft[10], tat[10], rt[10], wt[10];
int curr, n, p_done[10];
float pt = 0, w = 0, t = 0, r = 0, time = 0;
int total = 0, tot = 0;
struct node{
  int data;
  int bt;
  struct node* next;
};
typedef struct node Node;
Node *front = NULL;
Node *rear = NULL;
void line(int n){
  for(int l = 0; l < n; l++)
    for(int i = 0; i < 11 + (1/(l+1)); i++)
      printf("-");
  printf("\n");
}
Node* newNode(int d, int p){
  Node *temp = (Node*)malloc(sizeof(Node));
  temp->data = d;
  temp->bt = p;
  temp->next = NULL;
  return temp;
}
void dequeue(Node** front){
  Node* temp = *front;
  (*front) = (*front)->next;
  free(temp);
}
void enqueue(Node** front, int d, int p){
  Node* start = (*front);
  Node* temp = newNode(d, p);
  if(start==NULL){
    *front=temp;
  }
  else if ((*front)->bt > p){
    temp->next = *front;
    (*front) = temp;
  }
  else{
    while (start->next != NULL &&  start->next->bt <p){
      start = start->next;
    }
    temp->next = start->next;
    start->next = temp;
  }
}
void update(){
  int flag = 0;
  if(wt[curr] == -1){
    wt[curr] = st[curr] - at[curr];
    rt[curr] = st[curr] - at[curr];
    r += rt[curr];
    flag = 1;
  }
  else
    wt[curr] = wt[curr]+(pt-ft[curr]);


  ft[curr] = time;
  pe[tot].ft = ft[curr];
  tot++;
  printf("%d \t %d \t %d \t",st[curr],ft[curr],wt[curr]);
  if(bt[curr]!=0){
    printf("--\t");
    p_done[curr] = 1;
  }
  else{
    tat[curr] = ft[curr] - at[curr];
    printf("%d\t",tat[curr]);
  }
  if(flag==1){
    rt[curr] = st[curr] - at[curr];
    r = r + rt[curr];
    printf("%d\n",rt[curr]);
  }
  else
    printf("--\n");
  if(bt[curr]==0){
    t += tat[curr];
    w += wt[curr];
  }
  else
    enqueue(&front,curr,bt[curr]);
}
void initialise(){
  for(int i=0;i<n;i++){
    wt[i]=-1;
    p_done[i] = 0;
  }
}
int alldone(){
  total=0;
  for (int i=0;i<n;i++){
    if(p_done[i]==0)
      return 0;
  }
  return 1;
}
Node* addprocess(int time){
  for(int i = 0; i < n; i++){
    if(at[i] == time){
      if(p_done[i] == 0){
	enqueue(&front,i,bt[i]);
	p_done[i] = 1;
      }
    }
  }
  return front;
}
int main(){
  time = 0;
  printf("Enter the number of processes: ");
  scanf("%d",&n);
  for(int i = 0; i < n; i++){
    pid[i] = i + 1;
    printf("Enter AT, BT of P%d: ",pid[i]);
    scanf("%d",&at[i]);
    scanf("%d",&bt[i]);
  }
  initialise();


  printf("PID\t AT\t BT\t ST\t FT\t WT\t TAT\t RT\n");
  front = addprocess(time);
  if(front != NULL){
    curr = front->data;
    dequeue(&front);
  }
  else
    curr = -1;
  while(!alldone()||(front!=NULL)||curr!=-1){
    if(curr != -1){
      pt = time;
      st[curr] = time;
      printf("%d\t %d\t %d\t ",pid[curr],at[curr],bt[curr]);
      pe[tot].id = pid[curr];
      pe[tot].st = st[curr];
      while(bt[curr]>0){
	time++;
	bt[curr]--;
	front = addprocess(time);
	if(front != NULL && bt[curr] > bt[front->data])
	  break;
      }
      update();
    }
    else{
      time++;
      front = addprocess(time);
    }
    if(front != NULL){
      curr = front->data;
      dequeue(&front);
    }
    else
      curr = -1;
  }
  w/=n; t/=n; r/=n;
  printf("Average: WT = %.2f TAT = %.2f RT = %.2f\n", w, t, r);
  printf("Gantt chart:\n");
  line(tot);
  for(int i = 0; i <= 2; i++){
    if(i==1){
      for(int j = 0; j < tot; j++)
	printf("|    P%d    ", pe[j].id);
      printf("|");
    }
    else{
      for(int j = 0; j < tot; j++)
	printf("|          ");
      printf("|");
    }
    printf("\n");
  }
  line(tot);
  for(int i = 0; i < tot; i++){
    printf("%d         %d ",pe[i].st,pe[i].ft);
  }
  printf("\n");
}
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ ./psjf
Enter the number of processes: 4


Enter AT, BT of P1: 1 4
Enter AT, BT of P2: 0 6
Enter AT, BT of P3: 2 3
Enter AT, BT of P4: 2 5
PID	 AT	 BT	 ST	 FT	 WT	 TAT	 RT
2	 0	 6	 0 	 1 	 0 	--	0
1	 1	 4	 1 	 5 	 0 	4	0
3	 2	 3	 5 	 8 	 3 	6	3
4	 3	 5	 8 	 13 	 5 	10	5
2	 0	 5	 13 	 18 	 12 	18	--
Average: WT = 5.00 TAT = 9.50 RT = 4.00
Gantt chart:
--------------------------------------------------------
|          |          |          |          |          |
|    P2    |    P1    |    P3    |    P4    |    P2    |
|          |          |          |          |          |
--------------------------------------------------------
0         1 1         5 5         8 8         13 13         18 
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ cat npsjf.c
#include<stdio.h>
#include<stdlib.h>
struct process{
  int id;
  int st, ft;
};
typedef struct process Process;
Process pe[100];
int pid[10], at[10], bt[10], st[10], ft[10], tat[10], rt[10], wt[10];
int curr, n, p_done[10];
float pt = 0, w = 0, t = 0, r = 0, time = 0;
int total = 0, tot = 0;
struct node{
  int data;
  int bt;
  struct node* next;
};
typedef struct node Node;
Node *front = NULL;
Node *rear = NULL;
void line(int n){
  for(int l = 0; l < n; l++)
    for(int i = 0; i < 11 + (1/(l+1)); i++)
      printf("-");
  printf("\n");
}
Node* newNode(int d, int p){
  Node *temp = (Node*)malloc(sizeof(Node));
  temp->data = d;
  temp->bt = p;
  temp->next = NULL;
  return temp;
}
void dequeue(Node** front){
  Node* temp = *front;
  (*front) = (*front)->next;
  free(temp);
}
void enqueue(Node** front, int d, int p){
  Node* start = (*front);
  Node* temp = newNode(d, p);


  if(start==NULL){
    *front=temp;
  }
  else if ((*front)->bt > p){
    temp->next = *front;
    (*front) = temp;
  }
  else{
    while (start->next != NULL &&  start->next->bt <p){
      start = start->next;
    }
    temp->next = start->next;
    start->next = temp;
  }
}
void update(){
  int flag = 0;
  if(wt[curr] == -1){
    wt[curr] = st[curr] - at[curr];
    rt[curr] = st[curr] - at[curr];
    r += rt[curr];
    flag = 1;
  }
  else
    wt[curr] = wt[curr]+(pt-ft[curr]);
  ft[curr] = time;
  pe[tot].ft = ft[curr];
  tot++;
  printf("%d \t %d \t %d \t",st[curr],ft[curr],wt[curr]);
  if(bt[curr]!=0){
    printf("--\t");
    p_done[curr] = 1;
  }
  else{
    tat[curr] = ft[curr] - at[curr];
    printf("%d\t",tat[curr]);
  }
  if(flag==1){
    rt[curr] = st[curr] - at[curr];
    r = r + rt[curr];
    printf("%d\n",rt[curr]);
  }
  else
    printf("--\n");
  if(bt[curr]==0){
    t += tat[curr];
    w += wt[curr];
  }
  else
    enqueue(&front,curr,bt[curr]);
}
void initialise(){
  for(int i=0;i<n;i++){
    wt[i]=-1;
    p_done[i] = 0;
  }
}
int alldone(){
  total=0;
  for (int i=0;i<n;i++){
    if(p_done[i]==0)
      return 0;


  }
  return 1;
}
Node* addprocess(int time){
  for(int i = 0; i < n; i++){
    if(at[i] == time){
      if(p_done[i] == 0){
	enqueue(&front,i,bt[i]);
	p_done[i] = 1;
      }
    }
  }
  return front;
}
int main(){
  time = 0;
  printf("Enter the number of processes: ");
  scanf("%d",&n);
  for(int i = 0; i < n; i++){
    pid[i] = i + 1;
    printf("Enter AT, BT of P%d: ",pid[i]);
    scanf("%d",&at[i]);
    scanf("%d",&bt[i]);
  }
  initialise();
  printf("PID\t AT\t BT\t ST\t FT\t WT\t TAT\t RT\n");
  front = addprocess(time);
  if(front != NULL){
    curr = front->data;
    dequeue(&front);
  }
  else
    curr = -1;
  while(!alldone()||(front!=NULL)||curr!=-1){
    if(curr != -1){
      pt = time;
      st[curr] = time;
      printf("%d\t %d\t %d\t ",pid[curr],at[curr],bt[curr]);
      pe[tot].id = pid[curr];
      pe[tot].st = st[curr];
      while(bt[curr]>0){
	time++;
	bt[curr]--;
	front = addprocess(time);
      }
      update();
    }
    else{
      time++;
      front = addprocess(time);
    }
    if(front != NULL){
      curr = front->data;
      dequeue(&front);
    }
    else
      curr = -1;
  }
  w/=n; t/=n; r/=n;
  printf("Average: WT = %.2f TAT = %.2f RT = %.2f\n", w, t, r);
  printf("Gantt chart:\n");
  line(tot);


  for(int i = 0; i <= 2; i++){
    if(i==1){
      for(int j = 0; j < tot; j++)
	printf("|    P%d    ", pe[j].id);
      printf("|");
    }
    else{
      for(int j = 0; j < tot; j++)
	printf("|          ");
      printf("|");
    }
    printf("\n");
  }
  line(tot);
  for(int i = 0; i < tot; i++){
    printf("%d         %d ",pe[i].st,pe[i].ft);
  }
  printf("\n");
}
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ ./npsjf
Enter the number of processes: 4
Enter AT, BT of P1: 1 4
Enter AT, BT of P2: 0 6
Enter AT, BT of P3: 2 5
Enter AT, BT of P4: 3 3
PID	 AT	 BT	 ST	 FT	 WT	 TAT	 RT
2	 0	 6	 0 	 6 	 0 	6	0
4	 3	 3	 6 	 9 	 3 	6	3
1	 1	 4	 9 	 13 	 8 	12	8
3	 2	 5	 13 	 18 	 11 	16	11
Average: WT = 5.50 TAT = 10.00 RT = 11.00
Gantt chart:
---------------------------------------------
|          |          |          |          |
|    P2    |    P4    |    P1    |    P3    |
|          |          |          |          |
---------------------------------------------
0         6 6         9 9         13 13         18 
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex5##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex5#[00m$ exxi##[K##[Kit
exit

Script done on 2019-03-04 16:06:30+0530

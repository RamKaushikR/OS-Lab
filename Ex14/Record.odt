
Script started on 2019-03-13 20:59:04+0530
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex14##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex14#[00m$ cat contiguous.c
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct memory{
  int block;
  int notfree;
  char f[50];
};
typedef struct memory Memory;
Memory disc[100];
int memsize, blocksize, nb;
struct element{
  int block;
  int size;
  char f[50];
  struct element *next;
};
typedef struct element Element;
Element *table = NULL;
void initialise(){
  for(int i = 0; i < nb; i++){
    disc[i].block = i;
    disc[i].notfree = 0;
    strcpy(disc[i].f, "---");
  }
}
void insertfile(char f[], int size, int block){
  Element *newnode = (Element*)malloc(sizeof(Element));
  newnode->next = NULL;
  newnode->block = block;
  newnode->size = size;
  strcpy(newnode->f, f);
  if(table == NULL)
    table = newnode;
  else{
    newnode->next = table;
    table = newnode;
  }
}
void display(){
  Element *temp = table;
  printf("File\tBlock\tSize\n");
  while(temp!=NULL){
    printf("%s\t%d\t%d\n",temp->f,temp->block,temp->size);
    temp = temp->next;
  }
}
int checkfree(int size){
  for(int i = 0; i < nb; ){
    if(disc[i].notfree == 0){
      int j = i;
      while(disc[j].notfree == 0 && j < nb){
	if(j-i+1 == size)
	  return i;
	j++;
      }
      i += (j+1);
    }


    else i++;
  }
  return -1;
}
int check(int ind, int size){
  if(disc[ind].notfree == 0){
    for(int i = ind; i < ind+size && i < nb; i++)
      if(disc[i].notfree == 1)
	return 0;
  }
  else
    return 0;
  if(ind + size - 1 < nb)
    return 1;
  else
    return 0;
}
int allocate(int size, char name[]){
  int flag = 0;
  int b = size/blocksize;
  if(size*1.0/blocksize != b)
    b++;
  size = b;
  if(checkfree(size) >= 0){
    while(1){
      int ind = random()%nb;
      if(check(ind,size) == 1){
	flag = 1;
	int i = ind;
	do{
	  disc[i].notfree = 1;
	  strcpy(disc[i].f,name);
	  i++;
	}while(i < b+ind);
	insertfile(name,b,ind);
	break;
      }
    }
  }
  else
    printf("Not enough memory available!\n");
  return (flag == 0) ? 0 : 1;
}
int main(){
  int nf, size, block;
  char f[50];
  printf("Enter size of memory in KB: ");
  scanf("%d", &memsize);
  printf("Enter size of block in KB: ");
  scanf("%d", &blocksize);
  nb = memsize/blocksize;
  initialise();
  printf("Enter no. of files: ");
  scanf("%d", &nf);
  for(int i = 0; i < nf; i++){
    printf("Enter the file name: ");
    scanf("%s",f);
    printf("Enter the size of the file: ");
    scanf("%d",&size);
    allocate(size, f);
  }
  display();


  return 0;
}
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex14##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex14#[00m$ ./contiguous
Enter size of memory in KB: 20
Enter size of block in KB: 2
Enter no. of files: 4
Enter the file name: a
Enter the size of the file: 10
Enter the file name: b
Enter the size of the file: 10
Not enough memory available!
Enter the file name: c
Enter the size of the file: 3
Enter the file name: d
Enter the size of the file: 4
File	Block	Size
d	8	2
c	1	2
a	3	5
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex14##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex14#[00m$ cat linked.c
#include<stdio.h>
#include<stdlib.h>
struct list{
  int block;
  struct list *next;
};
typedef struct list List;
struct file{
  char n[10];
  int s, b;
  List* head;
};
typedef struct file File;
File files[100];
int freeb[100], mem, bsize, n, nf, c, r, f;
List* newnode(int n){
  List* p = (List*)malloc(sizeof(List));
  p->block = n;
  p->next = NULL;
  return p;
}
void print(List* head){
  for(List* t = head; t != NULL; t = t->next){
    printf("%d",t->block);
    if(t->next == NULL)
      printf("\n");
    else
      printf("->");
  }
}
int main(){
  printf("Enter size of memory in KB: ");
  scanf("%d", &mem);
  printf("Enter size of block in KB: ");
  scanf("%d", &bsize);
  printf("No. of blocks = %d\n", mem/bsize);
  n = mem/bsize;
  nf = n;


  for(int i = 0; i <= n/3; i++){
    r = random()%n;
    if(freeb[r] == 1)
      i--;
    else{
      freeb[r] = 1;
      nf--;
    }
  }
  printf("Free blocks:\n");
  for(int i = 0; i < n; i++){
    if(freeb[i] == 0)
      printf("%d ", i);
  }
  printf("\nEnter no. of files: ");
  scanf("%d", &f);
  for(int i = 0; i < f; i++){
    printf("Enter name of file %d: ", i+1);
    scanf("%s", (files[c].n));
    printf("Enter size in KB: ");
    scanf("%d", &files[c].s);
    files[c].b = files[c].s/bsize;
    if(files[c].s*1.0/bsize > files[c].b)
      (files[c].b)++;
    if(files[c].b > nf){
      printf("Can't allocate!\n");
      i--;
    }
    else{
      List *t, *p;
      for(int j = 0; j < files[c].b; j++){
	r = random()%n;
	if(freeb[r] == 0){
	  freeb[r] = 1;
	  nf--;
	  t = newnode(r);
	  if(j == 0){
	    files[c].head = t;
	    p = files[c].head;
	  }
	  else{
	    p->next = t;
	    p = t;
	  }
	}
	else
	  j--;
      }
      c++;
    }
    if(nf == 0){
      printf("Memory over!\n");
      f = c;
      break;
    }
  }
  printf("\nFile allocation:\n");
  for(int i = 0; i < f; i++){
    printf("File %s:\n",files[i].n);
    print(files[i].head);
    printf("\n");
  }


  return 0;
}
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex14##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex14#[00m$ ./linked
Enter size of memory in KB: 20
Enter size of block in KB: 2
No. of blocks = 10
Free blocks:
0 1 2 4 8 9 
Enter no. of files: 3
Enter name of file 1: a
Enter size in KB: 10
Enter name of file 2: b
Enter size in KB: 5
Can't allocate!
Enter name of file 2: b
Enter size in KB: 1
Memory over!

File allocation:
File a:
2->9->1->0->8

File b:
4

#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex14##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex14#[00m$ cat indexed.c
#include<stdio.h>
#include<stdlib.h>
struct file{
  char n[10];
  int s, b;
  int i;
};
typedef struct file File;
struct indexblock{
  int blockid;
  int blocks[100];
};
typedef struct indexblock IndexBlock;
IndexBlock index[100];
File files[100];
int freeb[100], mem, bsize, n, nf, c, r, f;
void print(int i){
  printf("Index block no.: %d\nBlock table:\n", index[i].blockid);
  for(int j = 0; j < files[i].b; j++)
    printf("%d ", index[i].blocks[j]);
}
int main(){
  printf("Enter size of memory in KB: ");
  scanf("%d", &mem);
  printf("Enter size of block in KB: ");
  scanf("%d", &bsize);
  printf("No. of blocks = %d\n", mem/bsize);
  n = mem/bsize;
  nf = n;
  for(int i = 0; i <= n/3; i++){
    r = random()%n;
    if(freeb[r] == 1)


      i--;
    else{
      freeb[r] = 1;
      nf--;
    }
  }
  printf("Free blocks:\n");
  for(int i = 0; i < n; i++)
    if(freeb[i] == 0)
      printf("%d ", i);
  printf("\nEnter no. of files: ");
  scanf("%d", &f);
  for(int i = 0; i < f; i++){
    printf("Enter name of file %d: ", i+1);
    scanf("%s", files[c].n);
    printf("Enter size in KB: ");
    scanf("%d", &files[c].s);
    files[c].b = files[c].s/bsize;
    if(files[c].s*1.0/bsize > files[c].b)
      (files[c].b)++;
    if(files[c].b + 1 > nf){
      printf("Can't allocate!\n");
      i--;
    }
    else{
      do{
	r = random()%n;
      }while(freeb[r] == 1);
      index[c].blockid = r;
      files[c].i = r;
      freeb[r] = 1;
      nf--;
      for(int j = 0; j < files[c].b; j++){
	r = random()%n;
	if(freeb[r] == 0){
	  freeb[r] = 1;
	  nf--;
	  index[c].blocks[j] = r;
	}
	else
	  j--;
      }
      c++;
    }
    if(nf == 0){
      printf("Memory over!\n");
      f = c;
      break;
    }
  }
  printf("\nFile Allocation:\n");
  for(int i = 0; i < f; i++){
    printf("File %s:\n",files[i].n);
    print(i);
    printf("\n");
  }
  return 0;
}
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex14##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex14#[00m$ ./indexed
Enter size of memory in KB: 20


Enter size of block in KB: 2
No. of blocks = 10
Free blocks:
0 1 2 4 8 9 
Enter no. of files: 3
Enter name of file 1: a
Enter size in KB: 10
Memory over!

File Allocation:
File a:
Index block no.: 2
Block table:
9 1 0 8 4 
#]0;ramkaushik@ram-kaushik: ~/Documents/College/OS-Lab/Ex14##[01;32mramkaushik@ram-kaushik#[00m:#[01;34m~/Documents/College/OS-Lab/Ex14#[00m$ exit
exit

Script done on 2019-03-13 21:01:18+0530
